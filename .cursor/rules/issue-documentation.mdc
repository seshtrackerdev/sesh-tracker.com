---
description: 
globs: 
alwaysApply: true
---
---
Description: Rule to ensure proper issue documentation and reference to existing fixes
---
# üîç Cursor Rule: Issue Resolution Documentation

This rule establishes a systematic approach for handling and documenting technical issues encountered during development. Cursor AI **must follow this workflow** when addressing major bugs, errors, or technical challenges.

---

## üìã Issue Resolution Process

### Step 1: Check Existing Fixes

**BEFORE** attempting to solve any major technical issue, Cursor must:

1. Check the `.docs/fixes/` directory to determine if a similar issue has been previously documented and resolved
2. Search for relevant keywords from the error message or problem description
3. Review any matching documentation to understand previous approaches

```javascript
// Example approach pseudocode
if (majorIssueDetected) {
  firstCheckDirectory('.docs/fixes/');
  searchForSimilarIssues(errorKeywords);
  if (existingFixFound) {
    suggestExistingApproach();
  } else {
    proceedToDocumentNewFix();
  }
}
```

### Step 2: Document Resolution Process

When solving a previously undocumented issue, Cursor must **create documentation** following this structure:

| Section | Content Requirements |
|---------|---------------------|
| **Issue Description** | ‚Ä¢ Clear statement of the error/problem<br>‚Ä¢ Error messages (if applicable)<br>‚Ä¢ Context in which the issue occurred |
| **Root Cause Analysis** | ‚Ä¢ Identification of the underlying problem<br>‚Ä¢ Explanation of why the issue occurred<br>‚Ä¢ Any architectural or dependency concerns |
| **Investigation Steps** | ‚Ä¢ Chronological documentation of debugging process<br>‚Ä¢ Files examined and their relevant content<br>‚Ä¢ Tests/validations performed |
| **Solution** | ‚Ä¢ Specific code changes made<br>‚Ä¢ Before/after comparisons<br>‚Ä¢ Explanation of why the solution works |
| **Guidelines** | ‚Ä¢ Recommendations to prevent similar issues<br>‚Ä¢ Best practices derived from the fix |
| **Verification** | ‚Ä¢ Evidence that the solution resolved the issue<br>‚Ä¢ Any additional validation steps |

### Step 3: Save Documentation

The fix documentation must be:

1. Saved in `.docs/fixes/` directory
2. Named descriptively (e.g., `resolve-circular-imports-in-dashboard-widgets.md`)
3. Formatted in Markdown for readability
4. Referenced in subsequent responses when similar issues arise

---

## ‚ö†Ô∏è Issue Severity Classification

Cursor should apply this documentation process for issues that meet any of the following criteria:

| Severity | Characteristics |
|----------|-----------------|
| **Critical** | ‚Ä¢ Application crashes or fails to start<br>‚Ä¢ Security vulnerabilities<br>‚Ä¢ Data loss or corruption |
| **Major** | ‚Ä¢ Features completely non-functional<br>‚Ä¢ Blocking development progress<br>‚Ä¢ Complex runtime errors<br>‚Ä¢ Build or deployment failures |
| **Notable** | ‚Ä¢ Non-trivial bugs requiring significant debugging<br>‚Ä¢ Issues that took multiple attempts to resolve<br>‚Ä¢ Problems that reveal architectural weaknesses |

Simple bugs, typos, or straightforward fixes do not require detailed documentation.

---

## üìö Example Documentation Structure

```markdown
# Fix: [Concise Issue Title]

## Issue Description
[Error message and context]

## Root Cause Analysis
[Explanation of the underlying problem]

## Investigation Steps
1. [First action taken]
2. [Observations]
3. [Next steps]
...

## Solution
[Detailed explanation with code examples]

## General Guidelines for Avoiding Similar Issues
1. [First recommendation]
2. [Second recommendation]
...

## Verification
[How the fix was tested/validated]
```

---

## üîÑ Documentation Maintenance

- When documentation in `.docs/fixes/` exceeds 20 files, suggest categorizing by issue type
- Reference relevant fixes by linking directly to the markdown file when providing solutions
- Maintain a consistent documentation style across all fix files

---

_Last updated: April 8, 2024_